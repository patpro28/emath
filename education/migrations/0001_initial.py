# Generated by Django 4.0.2 on 2022-03-19 08:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import education.models.problem


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('backend', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'contest id must be ^[a-z0-9]+$')], verbose_name='contest id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='contest name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_time', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(db_index=True, verbose_name='end time')),
                ('is_visible', models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('scoreboard_visibility', models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation')], default='V', help_text='Scoreboard visibility through the duration of the contest', max_length=1, verbose_name='scoreboard visibility')),
                ('is_private', models.BooleanField(default=False, verbose_name='private to specific users')),
                ('is_organization_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('og_image', models.CharField(blank=True, default='', max_length=150, verbose_name='OpenGraph image')),
                ('logo_override_image', models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users inside the contest.', max_length=150, verbose_name='Logo override image')),
                ('user_count', models.IntegerField(default=0, verbose_name='the amount of live participants')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='contest summary')),
                ('access_code', models.CharField(blank=True, default='', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code')),
                ('format_name', models.CharField(choices=[('default', 'Default')], default='default', help_text='The contest format module to use.', max_length=32, verbose_name='contest format')),
                ('problem_label_script', models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed contest problem index, and returns a string, the label.', verbose_name='contest problem label script')),
                ('points_precision', models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points')),
                ('authors', models.ManyToManyField(help_text='These users will be able to edit the contest.', related_name='authors+', to=settings.AUTH_USER_MODEL)),
                ('banned_users', models.ManyToManyField(blank=True, help_text='Bans the selected users from joining this contest.', to=settings.AUTH_USER_MODEL, verbose_name='personae non gratae')),
                ('curators', models.ManyToManyField(blank=True, help_text='These users will be able to edit the contest, but will not be listed as authors.', related_name='curators+', to=settings.AUTH_USER_MODEL)),
                ('organizations', models.ManyToManyField(blank=True, help_text='If private, only these organizations may see the contest', to='backend.Organization', verbose_name='organizations')),
                ('private_contestants', models.ManyToManyField(blank=True, help_text='If private, only these users may see the contest', related_name='private_contestants+', to=settings.AUTH_USER_MODEL, verbose_name='private contestants')),
            ],
            options={
                'verbose_name': 'contest',
                'verbose_name_plural': 'contests',
                'permissions': (('see_private_contest', 'See private contests'), ('edit_own_contest', 'Edit own contests'), ('edit_all_contest', 'Edit all contest'), ('clone_contest', 'Clone contest'), ('contest_rating', 'Rate contests'), ('create_private_contest', 'Create private contests'), ('change_contest_visibility', 'Change contest visibility'), ('contest_problem_label', 'Edit contest problem label script'), ('lock_contest', 'Change lock status of contest')),
            },
        ),
        migrations.CreateModel(
            name='ContestParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0, verbose_name="Participation's score")),
                ('real_start', models.DateTimeField(db_column='start', default=django.utils.timezone.now, verbose_name='start time')),
                ('cumtime', models.PositiveIntegerField(default=0, verbose_name='cumulative time')),
                ('is_disqualified', models.BooleanField(default=False, help_text='Whether this participation is disqualified.', verbose_name='is disqualified')),
                ('tiebreaker', models.FloatField(default=0.0, verbose_name='tie-breaker field')),
                ('virtual', models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation.', verbose_name='virtual participation id')),
                ('format_data', models.JSONField(blank=True, null=True, verbose_name='contest format specific data')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='education.contest', verbose_name='contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_history', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'contest participation',
                'verbose_name_plural': 'contest participations',
                'unique_together': {('contest', 'user', 'virtual')},
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
            ],
            options={
                'verbose_name': 'problem level',
                'verbose_name_plural': 'problem levels',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProblemGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Fullname')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short name')),
            ],
            options={
                'verbose_name': 'problem group',
                'verbose_name_plural': 'problem groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='submission time')),
                ('time', models.DateTimeField(db_index=True, null=True, verbose_name='completion time')),
                ('points', models.FloatField(db_index=True, default=0.0, null=True, verbose_name='points granted')),
                ('result', models.CharField(blank=True, choices=[('AC', 'Accepted'), ('WA', 'Wrong Answer'), ('PE', 'Pending')], db_index=True, default=None, max_length=3, null=True, verbose_name='result')),
                ('max_points', models.FloatField(db_index=True, default=1.0, null=True, verbose_name='max points')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.contest', verbose_name='contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='education.contestparticipation', verbose_name='user')),
            ],
            options={
                'verbose_name': 'submission',
                'verbose_name_plural': 'submissions',
                'permissions': (('view_all_submission', 'View all submission'), ('view_output_submission', 'View user submission output')),
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='A short, unique code for the problem, used in the url after /problem/', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Problem code must be ^[a-z0-9]+$')], verbose_name='problem code')),
                ('name', models.CharField(db_index=True, help_text='The full name of the problem, as shown in the problem list.', max_length=100, verbose_name='problem name')),
                ('description', models.TextField(validators=[education.models.problem.disallowed_characters_validator], verbose_name='problem body')),
                ('number_answer', models.IntegerField(default=0, verbose_name='Number of answer')),
                ('is_public', models.BooleanField(db_index=True, default=False, verbose_name='publicly visible')),
                ('is_organization_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('difficult', models.CharField(choices=[('newbie', 'Newbie'), ('amateur', 'Amateur'), ('expert', 'Expert'), ('cmaster', 'Candidate Master'), ('master', 'Master'), ('gmaster', 'Grandmaster')], default='newbie', max_length=10, verbose_name='Difficult of problem')),
                ('is_full_markup', models.BooleanField(default=False, verbose_name='allow full markdown access')),
                ('authors', models.ManyToManyField(blank=True, help_text='These users will be able to edit the problem, and be listed as authors.', related_name='authors', to=settings.AUTH_USER_MODEL, verbose_name='authors')),
                ('group', models.ForeignKey(help_text='The group of problem, shown under Category in the problem list.', on_delete=django.db.models.deletion.CASCADE, to='education.problemgroup', verbose_name='group')),
                ('level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='education.level', verbose_name='level')),
                ('organizations', models.ManyToManyField(blank=True, help_text='If private, only these organizations may see the problem.', to='backend.Organization', verbose_name='organizations')),
            ],
            options={
                'verbose_name': 'Problem',
                'verbose_name_plural': 'Problems',
                'ordering': ['code'],
                'permissions': (('view_private_problem', 'View private Math problems'), ('edit_own_problem', 'Edit own Math problems'), ('edit_all_problem', 'Edit all Math problems'), ('edit_public_problem', 'Edit all public Math problems'), ('see_organization_problem', 'See organizations-private Math problems'), ('change_public_visibility', 'Change public math problem visibility')),
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='point')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='education.contest', verbose_name='contest')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='education.problem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'contest problem',
                'verbose_name_plural': 'contest problems',
                'ordering': ('order',),
                'unique_together': {('problem', 'contest')},
            },
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(through='education.ContestProblem', to='education.Problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='contest',
            name='view_contest_scoreboard',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the scoreboard.', related_name='view_contest_scoreboard', to=settings.AUTH_USER_MODEL, verbose_name='view contest scoreboard'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100, verbose_name='Content')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Correct answer')),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='education.problem', verbose_name='problem')),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.BooleanField(default=False, verbose_name='result')),
                ('points', models.FloatField(null=True, verbose_name='points granted')),
                ('output', models.TextField(blank=True, verbose_name="student's answer")),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.contestproblem', verbose_name='problem')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='education.submission', verbose_name='submission')),
            ],
            options={
                'verbose_name': 'submission problem',
                'verbose_name_plural': 'submission problems',
                'unique_together': {('submission', 'problem')},
            },
        ),
    ]
